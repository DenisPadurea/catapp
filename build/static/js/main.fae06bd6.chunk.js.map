{"version":3,"sources":["components/Card.js","App.js","serviceWorker.js","index.js"],"names":["Card","state","selected","focused","onClick","e","preventDefault","_this","setState","onFocus","onLeave","_this$props$itemData","this","props","itemData","active","taste","quantity","gift","description","weight","color","weightStyle","backgroundColor","react_default","a","createElement","className","onPointerOver","onPointerLeave","points","fill","strokeWidth","stroke","style","href","Component","App","data","catData","map","item","components_Card","key","id","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wOAyDeA,6MAtDfC,MAAM,CAACC,UAAS,EAAMC,SAAQ,KAE9BC,QAAQ,SAACC,GACPA,EAAEC,iBACJC,EAAKC,SAAS,CAAEN,UAAUK,EAAKN,MAAMC,WACrCK,EAAKC,SAAS,CAACL,SAAQ,OAGvBM,QAAQ,WACNF,EAAKC,SAAS,CAACL,SAAQ,OAEzBO,QAAQ,WACRH,EAAKC,SAAS,CAACL,SAAQ,6EAGZ,IAAAQ,EAC6CC,KAAKC,MAAMC,SAA1DC,EADEJ,EACFI,OAAOC,EADLL,EACKK,MAAMC,EADXN,EACWM,SAASC,EADpBP,EACoBO,KAAKC,EADzBR,EACyBQ,YAAYC,EADrCT,EACqCS,OACxCC,EAAON,EAAQH,KAAKX,MAAMC,SAAUU,KAAKX,MAAME,QAAQ,UAAU,UAAYS,KAAKX,MAAME,QAAQ,UAAU,UAAY,UACpHmB,EAAY,CAChBC,gBAAoBF,GAKtB,OAAOG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAEtBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOvB,QAASW,GAAQH,KAAKR,QAASwB,cAAeb,GAAQH,KAAKH,QAASoB,eAAgBd,GAAQH,KAAKF,SAEvHc,EAAAC,EAAAC,cAAA,WACJF,EAAAC,EAAAC,cAAA,YAAUI,OAAO,sCAAsCC,KAAMhB,EAAO,OAAO,wBAAyBiB,YAAY,IAAIC,OAAQZ,KAEvHT,KAAKX,MAAMC,UAAUU,KAAKX,MAAME,QAASqB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,mCAAb,2FAAqEH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,wBAAb,gJAChHH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,wBAAd,8CACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,wBAAwBX,GACrCQ,EAAAC,EAAAC,cAAA,KAAGC,UAAU,2BAA2BV,GACxCO,EAAAC,EAAAC,cAAA,KAAGC,UAAU,uBAAuBT,GACpCM,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAcO,MAAOZ,GACpCE,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gBACfP,GACDI,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,SAAhB,kBAKHH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACdZ,EAASH,KAAKX,MAAMC,SAAuFsB,EAAAC,EAAAC,cAAA,SAAIP,GAAlFK,EAAAC,EAAAC,cAAA,gJAA8BF,EAAAC,EAAAC,cAAA,KAAGS,KAAK,IAAI/B,QAASQ,KAAKR,SAA1B,6BAAsEoB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,wBAAb,oDAA8CX,EAA9C,0EAhD/GoB,aCkBJC,6MAZfpC,MAAM,CAAEqC,KAAKC,2EAKT,OAAOf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACpBf,KAAKX,MAAMqC,KAAKE,IAAI,SAAAC,GAAI,OAAGjB,EAAAC,EAAAC,cAACgB,EAAD,CAAMC,IAAKF,EAAKG,GAAI9B,SAAU2B,cAP7CL,aCMES,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3B,EAAAC,EAAAC,cAAC0B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.fae06bd6.chunk.js","sourcesContent":["import React, { Component } from 'react';\nclass Card extends Component {\n\nstate={selected:false,focused:false};\n\nonClick=(e)=>{\n  e.preventDefault();\nthis.setState({ selected:!this.state.selected});\nthis.setState({focused:false}); \n}\n\nonFocus=()=>{\n  this.setState({focused:true});\n}\nonLeave=()=>{\nthis.setState({focused:false});\n}\n\n  render() {\n  const {active,taste,quantity,gift,description,weight}=this.props.itemData;\n  const color=(active?(this.state.selected?(this.state.focused?\"#e62e7a\":\"#d91667\"):(this.state.focused?\"#2ea8e6\":\"#1698d9\")):\"#b3b3b3\");\n    const weightStyle={\n      \"backgroundColor\" : color\n    }\n\n\n\n    return <div className=\"full_card\"> \n\n    <div className=\"card\" onClick={active&&this.onClick} onPointerOver={active&&this.onFocus} onPointerLeave={active&&this.onLeave}>\n    \n    <svg>\n<polyline points=\"0,45 40,2 318,2 318,478 2,478 2,45 \" fill={active?\"none\":\"rgba(242,242,242,0.7)\"} strokeWidth=\"4\" stroke={color}/>\n  </svg>\n   {(this.state.selected&&this.state.focused)?<p className=\"card_first fist_hover card_item\">Котэ не одобряет?</p>:<p className=\"card_first card_item\">Сказачное заморское яство</p>}\n   <h1 className=\"card_title card_item\">Нямушка</h1>\n   <p className=\"card_taste card_item\">{taste}</p>\n   <p className=\"card_quantity card_item\">{quantity}</p>\n   <p className=\"card_gift card_item\">{gift}</p>\n   <div className=\"card_weight\" style={weightStyle}>\n   <span className=\"weight_value\" >\n   {weight}</span> \n   <br/>\n   <span className=\"kilos\">\n   кг\n  </span>\n   </div>\n   </div>\n<div className=\"card_description\">\n{active?(!this.state.selected?<p>Чего сидишь? Порадуй котэ, <a href=\"#\" onClick={this.onClick}>купи</a></p>:<p>{description}</p>):<p className=\"disabled_description\">Печалька,{taste} закончился</p>} \n</div>\n   </div>;\n   \n\n}\n}\n\nexport default Card;","import React, { Component } from 'react';\nimport './App.css';\nimport catData from './data/catData'\nimport Card from './components/Card'\n\n\nclass App extends Component {\nstate={ data:catData}\n\n\n  render() {\n\n    return <div className=\"container\">\n     {this.state.data.map(item=> <Card key={item.id} itemData={item} />) }\n     </div>\n           \n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}